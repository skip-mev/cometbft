// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tendermint/p2p/valp2p.proto

package p2p

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Valp2PRequest struct {
}

func (m *Valp2PRequest) Reset()         { *m = Valp2PRequest{} }
func (m *Valp2PRequest) String() string { return proto.CompactTextString(m) }
func (*Valp2PRequest) ProtoMessage()    {}
func (*Valp2PRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30d63ca6b88a5efb, []int{0}
}
func (m *Valp2PRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Valp2PRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Valp2PRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Valp2PRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Valp2PRequest.Merge(m, src)
}
func (m *Valp2PRequest) XXX_Size() int {
	return m.Size()
}
func (m *Valp2PRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Valp2PRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Valp2PRequest proto.InternalMessageInfo

type Valp2PResponse struct {
	Addrs []NetAddress `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs"`
}

func (m *Valp2PResponse) Reset()         { *m = Valp2PResponse{} }
func (m *Valp2PResponse) String() string { return proto.CompactTextString(m) }
func (*Valp2PResponse) ProtoMessage()    {}
func (*Valp2PResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30d63ca6b88a5efb, []int{1}
}
func (m *Valp2PResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Valp2PResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Valp2PResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Valp2PResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Valp2PResponse.Merge(m, src)
}
func (m *Valp2PResponse) XXX_Size() int {
	return m.Size()
}
func (m *Valp2PResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Valp2PResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Valp2PResponse proto.InternalMessageInfo

func (m *Valp2PResponse) GetAddrs() []NetAddress {
	if m != nil {
		return m.Addrs
	}
	return nil
}

type Valp2PAddr struct {
	Addr NetAddress `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr"`
}

func (m *Valp2PAddr) Reset()         { *m = Valp2PAddr{} }
func (m *Valp2PAddr) String() string { return proto.CompactTextString(m) }
func (*Valp2PAddr) ProtoMessage()    {}
func (*Valp2PAddr) Descriptor() ([]byte, []int) {
	return fileDescriptor_30d63ca6b88a5efb, []int{2}
}
func (m *Valp2PAddr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Valp2PAddr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Valp2PAddr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Valp2PAddr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Valp2PAddr.Merge(m, src)
}
func (m *Valp2PAddr) XXX_Size() int {
	return m.Size()
}
func (m *Valp2PAddr) XXX_DiscardUnknown() {
	xxx_messageInfo_Valp2PAddr.DiscardUnknown(m)
}

var xxx_messageInfo_Valp2PAddr proto.InternalMessageInfo

func (m *Valp2PAddr) GetAddr() NetAddress {
	if m != nil {
		return m.Addr
	}
	return NetAddress{}
}

type Valp2PMessage struct {
	// Types that are valid to be assigned to Sum:
	//	*Valp2PMessage_Valp2PRequest
	//	*Valp2PMessage_Valp2PResponse
	//	*Valp2PMessage_Valp2PAddr
	Sum isValp2PMessage_Sum `protobuf_oneof:"sum"`
}

func (m *Valp2PMessage) Reset()         { *m = Valp2PMessage{} }
func (m *Valp2PMessage) String() string { return proto.CompactTextString(m) }
func (*Valp2PMessage) ProtoMessage()    {}
func (*Valp2PMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_30d63ca6b88a5efb, []int{3}
}
func (m *Valp2PMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Valp2PMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Valp2PMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Valp2PMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Valp2PMessage.Merge(m, src)
}
func (m *Valp2PMessage) XXX_Size() int {
	return m.Size()
}
func (m *Valp2PMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_Valp2PMessage.DiscardUnknown(m)
}

var xxx_messageInfo_Valp2PMessage proto.InternalMessageInfo

type isValp2PMessage_Sum interface {
	isValp2PMessage_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Valp2PMessage_Valp2PRequest struct {
	Valp2PRequest *Valp2PRequest `protobuf:"bytes,1,opt,name=valp2p_request,json=valp2pRequest,proto3,oneof" json:"valp2p_request,omitempty"`
}
type Valp2PMessage_Valp2PResponse struct {
	Valp2PResponse *Valp2PResponse `protobuf:"bytes,2,opt,name=valp2p_response,json=valp2pResponse,proto3,oneof" json:"valp2p_response,omitempty"`
}
type Valp2PMessage_Valp2PAddr struct {
	Valp2PAddr *Valp2PAddr `protobuf:"bytes,3,opt,name=valp2p_addr,json=valp2pAddr,proto3,oneof" json:"valp2p_addr,omitempty"`
}

func (*Valp2PMessage_Valp2PRequest) isValp2PMessage_Sum()  {}
func (*Valp2PMessage_Valp2PResponse) isValp2PMessage_Sum() {}
func (*Valp2PMessage_Valp2PAddr) isValp2PMessage_Sum()     {}

func (m *Valp2PMessage) GetSum() isValp2PMessage_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *Valp2PMessage) GetValp2PRequest() *Valp2PRequest {
	if x, ok := m.GetSum().(*Valp2PMessage_Valp2PRequest); ok {
		return x.Valp2PRequest
	}
	return nil
}

func (m *Valp2PMessage) GetValp2PResponse() *Valp2PResponse {
	if x, ok := m.GetSum().(*Valp2PMessage_Valp2PResponse); ok {
		return x.Valp2PResponse
	}
	return nil
}

func (m *Valp2PMessage) GetValp2PAddr() *Valp2PAddr {
	if x, ok := m.GetSum().(*Valp2PMessage_Valp2PAddr); ok {
		return x.Valp2PAddr
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Valp2PMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Valp2PMessage_Valp2PRequest)(nil),
		(*Valp2PMessage_Valp2PResponse)(nil),
		(*Valp2PMessage_Valp2PAddr)(nil),
	}
}

func init() {
	proto.RegisterType((*Valp2PRequest)(nil), "tendermint.p2p.Valp2pRequest")
	proto.RegisterType((*Valp2PResponse)(nil), "tendermint.p2p.Valp2pResponse")
	proto.RegisterType((*Valp2PAddr)(nil), "tendermint.p2p.Valp2pAddr")
	proto.RegisterType((*Valp2PMessage)(nil), "tendermint.p2p.Valp2pMessage")
}

func init() { proto.RegisterFile("tendermint/p2p/valp2p.proto", fileDescriptor_30d63ca6b88a5efb) }

var fileDescriptor_30d63ca6b88a5efb = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x6d, 0xda, 0x32, 0x5c, 0xd5, 0x54, 0x8a, 0x18, 0xaa, 0x20, 0x4c, 0x95, 0x89, 0x29,
	0x11, 0x01, 0xb1, 0x31, 0x90, 0x01, 0x05, 0x21, 0x18, 0x32, 0x30, 0xb0, 0xa0, 0xb6, 0x31, 0xa1,
	0x12, 0x89, 0x4d, 0xec, 0x44, 0xe2, 0x2d, 0x78, 0xac, 0x8e, 0x1d, 0x99, 0x10, 0x4a, 0x16, 0x1e,
	0x03, 0xc5, 0x6e, 0x1b, 0x52, 0x81, 0xc4, 0x76, 0xfe, 0xef, 0xd7, 0xe7, 0xfb, 0xef, 0x60, 0x5f,
	0xd2, 0x34, 0xa2, 0x59, 0x32, 0x4f, 0xa5, 0xcb, 0x3d, 0xee, 0x16, 0x93, 0x67, 0xee, 0x71, 0x87,
	0x67, 0x4c, 0x32, 0xd3, 0x68, 0x9a, 0x0e, 0xf7, 0xb8, 0x65, 0x6d, 0x99, 0xe5, 0x2b, 0xa7, 0x42,
	0x7b, 0xad, 0xbd, 0x98, 0xc5, 0x4c, 0x95, 0x6e, 0x5d, 0x69, 0xd5, 0x1e, 0xc2, 0xe0, 0x4e, 0x11,
	0x43, 0xfa, 0x92, 0x53, 0x21, 0xed, 0x00, 0x8c, 0xb5, 0x20, 0x38, 0x4b, 0x05, 0x35, 0xcf, 0xa0,
	0x37, 0x89, 0xa2, 0x4c, 0x8c, 0xf0, 0xb8, 0x73, 0xd4, 0xf7, 0x2c, 0xa7, 0xfd, 0xa9, 0x73, 0x4b,
	0xe5, 0x45, 0x14, 0x65, 0x54, 0x08, 0xbf, 0xbb, 0xf8, 0x38, 0x44, 0xa1, 0xb6, 0xdb, 0x3e, 0x80,
	0x26, 0xd5, 0x5d, 0xf3, 0x14, 0xba, 0xb5, 0x3c, 0xc2, 0x63, 0xfc, 0x2f, 0x88, 0x72, 0xdb, 0x5f,
	0x78, 0x3d, 0xdf, 0x0d, 0x15, 0x62, 0x12, 0x53, 0xf3, 0x12, 0x0c, 0xbd, 0x82, 0x87, 0x4c, 0x4f,
	0xbc, 0x22, 0x1e, 0x6c, 0x13, 0x5b, 0xb1, 0x02, 0x14, 0x0e, 0x8a, 0x9f, 0x82, 0x79, 0x05, 0xc3,
	0x0d, 0x47, 0x07, 0x1d, 0xed, 0x28, 0x10, 0xf9, 0x0b, 0xa4, 0x5d, 0x01, 0x0a, 0x8d, 0xa2, 0xbd,
	0xa0, 0x73, 0xe8, 0xaf, 0x50, 0x2a, 0x61, 0xe7, 0xf7, 0x84, 0xcd, 0x2e, 0x02, 0x14, 0x42, 0xb1,
	0x79, 0xf9, 0x3d, 0xe8, 0x88, 0x3c, 0xf1, 0xaf, 0x17, 0x25, 0xc1, 0xcb, 0x92, 0xe0, 0xcf, 0x92,
	0xe0, 0xb7, 0x8a, 0xa0, 0x65, 0x45, 0xd0, 0x7b, 0x45, 0xd0, 0xfd, 0x71, 0x3c, 0x97, 0x4f, 0xf9,
	0xd4, 0x99, 0xb1, 0xc4, 0x9d, 0xb1, 0x84, 0xca, 0xe9, 0xa3, 0x6c, 0x0a, 0x7d, 0xd2, 0xf6, 0xe1,
	0xa7, 0xbb, 0x4a, 0x3d, 0xf9, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x66, 0x1e, 0xf6, 0x5b, 0x3e, 0x02,
	0x00, 0x00,
}

func (m *Valp2PRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Valp2PRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Valp2PRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Valp2PResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Valp2PResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Valp2PResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for iNdEx := len(m.Addrs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Addrs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValp2P(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Valp2PAddr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Valp2PAddr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Valp2PAddr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Addr.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintValp2P(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Valp2PMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Valp2PMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Valp2PMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Valp2PMessage_Valp2PRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Valp2PMessage_Valp2PRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Valp2PRequest != nil {
		{
			size, err := m.Valp2PRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Valp2PMessage_Valp2PResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Valp2PMessage_Valp2PResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Valp2PResponse != nil {
		{
			size, err := m.Valp2PResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Valp2PMessage_Valp2PAddr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Valp2PMessage_Valp2PAddr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Valp2PAddr != nil {
		{
			size, err := m.Valp2PAddr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func encodeVarintValp2P(dAtA []byte, offset int, v uint64) int {
	offset -= sovValp2P(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Valp2PRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Valp2PResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for _, e := range m.Addrs {
			l = e.Size()
			n += 1 + l + sovValp2P(uint64(l))
		}
	}
	return n
}

func (m *Valp2PAddr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Addr.Size()
	n += 1 + l + sovValp2P(uint64(l))
	return n
}

func (m *Valp2PMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *Valp2PMessage_Valp2PRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valp2PRequest != nil {
		l = m.Valp2PRequest.Size()
		n += 1 + l + sovValp2P(uint64(l))
	}
	return n
}
func (m *Valp2PMessage_Valp2PResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valp2PResponse != nil {
		l = m.Valp2PResponse.Size()
		n += 1 + l + sovValp2P(uint64(l))
	}
	return n
}
func (m *Valp2PMessage_Valp2PAddr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valp2PAddr != nil {
		l = m.Valp2PAddr.Size()
		n += 1 + l + sovValp2P(uint64(l))
	}
	return n
}

func sovValp2P(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValp2P(x uint64) (n int) {
	return sovValp2P(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Valp2PRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Valp2pRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Valp2pRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipValp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Valp2PResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Valp2pResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Valp2pResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, NetAddress{})
			if err := m.Addrs[len(m.Addrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Valp2PAddr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Valp2pAddr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Valp2pAddr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Addr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Valp2PMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Valp2pMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Valp2pMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valp2PRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Valp2PRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Valp2PMessage_Valp2PRequest{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valp2PResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Valp2PResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Valp2PMessage_Valp2PResponse{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valp2PAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Valp2PAddr{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Valp2PMessage_Valp2PAddr{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValp2P(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValp2P
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValp2P
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValp2P
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValp2P
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValp2P
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValp2P
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValp2P        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValp2P          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValp2P = fmt.Errorf("proto: unexpected end of group")
)
